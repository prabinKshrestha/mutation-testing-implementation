using NUnit.Framework;

namespace MutationApp.Test
{
    /*
     * Test class for Shopping Cart Service
     * */
    public class ShoppingCartServiceTest
    {
        [Test]
        public void CalculateTotalPrice_ShouldReturnZero_WhenCartIsEmpty()
        {
            decimal totalPrice = new ShoppingCartService().CalculateTotalPriceWithoutDiscount();
            Assert.AreEqual(0, totalPrice);     // Assert
        }

        [Test]
        public void CalculateTotalPrice_ShouldReturnCorrectTotalPrice_WhenCartHasItems()
        {
            ShoppingCartService cart = new ShoppingCartService();
            cart.AddItem(new CartItem { Name = "Item 1", Price = 10, Quantity = 2 });
            cart.AddItem(new CartItem { Name = "Item 2", Price = 5, Quantity = 3 });
            decimal totalPrice = cart.CalculateTotalPriceWithoutDiscount(); 
            Assert.AreEqual(35, totalPrice);    // Assert
        }

        [Test]
        public void IsEmpty_ShouldReturnTrue_WhenCartIsEmpty()
        {
            bool isEmpty = new ShoppingCartService().IsEmpty();
            Assert.True(isEmpty);               // Assert
        }

        [Test]
        public void IsEmpty_ShouldReturnFalse_WhenCartIsNotEmpty()
        {
            ShoppingCartService cart = new ShoppingCartService();
            cart.AddItem(new CartItem { Name = "Item 1", Price = 10, Quantity = 1 });
            bool isEmpty = cart.IsEmpty();
            Assert.False(isEmpty);              // Assert
        }

        [Test]
        public void IsDiscountEligible_ShouldReturnTrue_WhenCartItemsIs9()
        {
            ShoppingCartService cart = new ShoppingCartService();
            for (int i = 1; i <= 9; i++)
            {
                cart.AddItem(new CartItem { Name = $"Item {i}", Price = i * 10, Quantity = 1 });
            }
            bool isEligible = cart.IsDiscountEligible();
            Assert.True(isEligible);              // Assert
        }

        [Test]
        public void IsDiscountEligible_ShouldReturnFalse_WhenCartItemsIs2()
        {
            ShoppingCartService cart = new ShoppingCartService();
            for (int i = 1; i <= 2; i++)
            {
                cart.AddItem(new CartItem { Name = $"Item {i}", Price = i * 10, Quantity = 1 });
            }
            bool isEligible = cart.IsDiscountEligible();
            Assert.False(isEligible);              // Assert
        }

        /*
         * Uncomment the following section to get 100% mutation score. 
         * With the following section commented or missing, mutatant generated by changing method IsDiscountEligible will survive
         * With the mutant being survived, we know either program code is wrong or test cases are not enough. 
         * So, we add following code to fulfill the test coverage.
         * The following code actually checks the boundy condition
         * */

        [Test]
        public void IsDiscountEligible_ShouldReturnTrue_WhenCartItemsIs5()
        {
            ShoppingCartService cart = new ShoppingCartService();
            for (int i = 1; i <= ShoppingCartService.DISCOUNT_THRESHOLD_QUANTITY; i++)
            {
                cart.AddItem(new CartItem { Name = $"Item {i}", Price = i * 10, Quantity = 1 });
            }
            bool isEligible = cart.IsDiscountEligible();
            Assert.True(isEligible);              // Assert
        }
    }
}